*** sonar-auth-github/src/test/java/org/sonarsource/auth/github/GitHubSettingsTest.java	2016-03-12 21:51:52.000000000 -0800
--- sonar-auth-google/src/test/java/com/jirav/sonarqube/auth/google/GoogleSettingsTest.java	2016-03-13 10:49:23.000000000 -0700
***************
*** 1,5 ****
  /*
!  * GitHub Authentication for SonarQube
   * Copyright (C) 2016-2016 SonarSource SA
   * mailto:contact AT sonarsource DOT com
   *
--- 1,5 ----
  /*
!  * Google Authentication for SonarQube
   * Copyright (C) 2016-2016 SonarSource SA
   * mailto:contact AT sonarsource DOT com
   *
***************
*** 17,109 ****
   * along with this program; if not, write to the Free Software Foundation,
   * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   */
! package org.sonarsource.auth.github;
  
  import org.junit.Test;
  import org.sonar.api.config.Settings;
  
  import static org.assertj.core.api.Assertions.assertThat;
! import static org.sonarsource.auth.github.GitHubSettings.LOGIN_STRATEGY_DEFAULT_VALUE;
! import static org.sonarsource.auth.github.GitHubSettings.LOGIN_STRATEGY_PROVIDER_ID;
  
! public class GitHubSettingsTest {
  
    Settings settings = new Settings();
  
!   GitHubSettings underTest = new GitHubSettings(settings);
  
    @Test
    public void is_enabled() throws Exception {
!     settings.setProperty("sonar.auth.github.clientId", "id");
!     settings.setProperty("sonar.auth.github.clientSecret", "secret");
!     settings.setProperty("sonar.auth.github.loginStrategy", LOGIN_STRATEGY_DEFAULT_VALUE);
  
!     settings.setProperty("sonar.auth.github.enabled", true);
      assertThat(underTest.isEnabled()).isTrue();
  
!     settings.setProperty("sonar.auth.github.enabled", false);
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void is_enabled_always_return_false_when_client_id_is_null() throws Exception {
!     settings.setProperty("sonar.auth.github.enabled", true);
!     settings.setProperty("sonar.auth.github.clientId", (String) null);
!     settings.setProperty("sonar.auth.github.clientSecret", "secret");
!     settings.setProperty("sonar.auth.github.loginStrategy", LOGIN_STRATEGY_DEFAULT_VALUE);
  
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void is_enabled_always_return_false_when_client_secret_is_null() throws Exception {
!     settings.setProperty("sonar.auth.github.enabled", true);
!     settings.setProperty("sonar.auth.github.clientId", "id");
!     settings.setProperty("sonar.auth.github.clientSecret", (String) null);
!     settings.setProperty("sonar.auth.github.loginStrategy", LOGIN_STRATEGY_DEFAULT_VALUE);
  
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void is_enabled_always_return_false_when_login_strategy_is_null() throws Exception {
!     settings.setProperty("sonar.auth.github.enabled", true);
!     settings.setProperty("sonar.auth.github.clientId", "id");
!     settings.setProperty("sonar.auth.github.clientSecret", "secret");
!     settings.setProperty("sonar.auth.github.loginStrategy", (String) null);
  
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void return_client_id() throws Exception {
!     settings.setProperty("sonar.auth.github.clientId", "id");
      assertThat(underTest.clientId()).isEqualTo("id");
    }
  
    @Test
    public void return_client_secret() throws Exception {
!     settings.setProperty("sonar.auth.github.clientSecret", "secret");
      assertThat(underTest.clientSecret()).isEqualTo("secret");
    }
  
    @Test
    public void return_login_strategy() throws Exception {
!     settings.setProperty("sonar.auth.github.loginStrategy", LOGIN_STRATEGY_PROVIDER_ID);
      assertThat(underTest.loginStrategy()).isEqualTo(LOGIN_STRATEGY_PROVIDER_ID);
    }
  
    @Test
    public void allow_users_to_sign_up() throws Exception {
!     settings.setProperty("sonar.auth.github.allowUsersToSignUp", "true");
      assertThat(underTest.allowUsersToSignUp()).isTrue();
  
!     settings.setProperty("sonar.auth.github.allowUsersToSignUp", "false");
      assertThat(underTest.allowUsersToSignUp()).isFalse();
    }
  
    @Test
    public void definitions() throws Exception {
!     assertThat(GitHubSettings.definitions()).hasSize(5);
    }
  }
--- 17,109 ----
   * along with this program; if not, write to the Free Software Foundation,
   * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
   */
! package com.jirav.sonarqube.auth.google;
  
  import org.junit.Test;
  import org.sonar.api.config.Settings;
  
  import static org.assertj.core.api.Assertions.assertThat;
! import static com.jirav.sonarqube.auth.google.GoogleSettings.LOGIN_STRATEGY_DEFAULT_VALUE;
! import static com.jirav.sonarqube.auth.google.GoogleSettings.LOGIN_STRATEGY_PROVIDER_ID;
  
! public class GoogleSettingsTest {
  
    Settings settings = new Settings();
  
!   GoogleSettings underTest = new GoogleSettings(settings);
  
    @Test
    public void is_enabled() throws Exception {
!     settings.setProperty("sonar.auth.google.clientId", "id");
!     settings.setProperty("sonar.auth.google.clientSecret", "secret");
!     settings.setProperty("sonar.auth.google.loginStrategy", LOGIN_STRATEGY_DEFAULT_VALUE);
  
!     settings.setProperty("sonar.auth.google.enabled", true);
      assertThat(underTest.isEnabled()).isTrue();
  
!     settings.setProperty("sonar.auth.google.enabled", false);
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void is_enabled_always_return_false_when_client_id_is_null() throws Exception {
!     settings.setProperty("sonar.auth.google.enabled", true);
!     settings.setProperty("sonar.auth.google.clientId", (String) null);
!     settings.setProperty("sonar.auth.google.clientSecret", "secret");
!     settings.setProperty("sonar.auth.google.loginStrategy", LOGIN_STRATEGY_DEFAULT_VALUE);
  
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void is_enabled_always_return_false_when_client_secret_is_null() throws Exception {
!     settings.setProperty("sonar.auth.google.enabled", true);
!     settings.setProperty("sonar.auth.google.clientId", "id");
!     settings.setProperty("sonar.auth.google.clientSecret", (String) null);
!     settings.setProperty("sonar.auth.google.loginStrategy", LOGIN_STRATEGY_DEFAULT_VALUE);
  
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void is_enabled_always_return_false_when_login_strategy_is_null() throws Exception {
!     settings.setProperty("sonar.auth.google.enabled", true);
!     settings.setProperty("sonar.auth.google.clientId", "id");
!     settings.setProperty("sonar.auth.google.clientSecret", "secret");
!     settings.setProperty("sonar.auth.google.loginStrategy", (String) null);
  
      assertThat(underTest.isEnabled()).isFalse();
    }
  
    @Test
    public void return_client_id() throws Exception {
!     settings.setProperty("sonar.auth.google.clientId", "id");
      assertThat(underTest.clientId()).isEqualTo("id");
    }
  
    @Test
    public void return_client_secret() throws Exception {
!     settings.setProperty("sonar.auth.google.clientSecret", "secret");
      assertThat(underTest.clientSecret()).isEqualTo("secret");
    }
  
    @Test
    public void return_login_strategy() throws Exception {
!     settings.setProperty("sonar.auth.google.loginStrategy", LOGIN_STRATEGY_PROVIDER_ID);
      assertThat(underTest.loginStrategy()).isEqualTo(LOGIN_STRATEGY_PROVIDER_ID);
    }
  
    @Test
    public void allow_users_to_sign_up() throws Exception {
!     settings.setProperty("sonar.auth.google.allowUsersToSignUp", "true");
      assertThat(underTest.allowUsersToSignUp()).isTrue();
  
!     settings.setProperty("sonar.auth.google.allowUsersToSignUp", "false");
      assertThat(underTest.allowUsersToSignUp()).isFalse();
    }
  
    @Test
    public void definitions() throws Exception {
!     assertThat(GoogleSettings.definitions()).hasSize(5);
    }
  }
